// Generated by CoffeeScript 1.7.1

/*
 * TODO: Finish the transition to exoskeleton.js
 */

(function() {
  var API_ROOT, Application,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  RegExp.escape = function(s) {
    return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
  };

  String.prototype.format = function() {
    var i, pattern, replacements, string, _i, _ref;
    string = this;
    replacements = Array.prototype.slice.call(arguments, 0);
    for (i = _i = 0, _ref = replacements.length - 1; _i <= _ref; i = _i += 1) {
      pattern = new RegExp(RegExp.escape("\{" + i + "\}"), 'g');
      string = string.replace(pattern, replacements[i]);
    }
    return string;
  };

  String.prototype.template = function(keywords) {
    var key, pattern, string, value;
    string = this;
    for (key in keywords) {
      value = keywords[key];
      pattern = new RegExp("<%=\\s*" + key + "\\s*%>", 'gi');
      string = string.replace(pattern, value);
    }
    return string.replace(/<\/?script>/g, '');
  };

  String.prototype.toTitleCase = function() {
    var i, peices, string, _i, _ref;
    string = this;
    peices = string.split(" ");
    for (i = _i = 0, _ref = peices.length - 1; _i <= _ref; i = _i += 1) {
      if (peices[i].length) {
        peices[i] = peices[i][0].toUpperCase() + peices[i].substr(1);
      }
    }
    return peices.join(" ");
  };

  String.prototype.trim = function() {
    return this.replace(/^\s+|\s+$/gm, '');
  };

  API_ROOT = '/api/v1/{0}/';

  Application = (function(_super) {
    __extends(Application, _super);

    Application.prototype.API_ROOT = API_ROOT;

    function Application(options) {
      this.$ = window.$ || window.jQuery;
    }

    Application.prototype.getCookie = function(name) {
      var cookie, cookieValue, cookies, _i, _len;
      cookieValue = null;
      if (document.cookie && document.cookie !== '') {
        cookies = document.cookie.split(';');
        for (_i = 0, _len = cookies.length; _i < _len; _i++) {
          cookie = cookies[_i];
          cookie = cookie.trim();
          if (cookie.substring(0, name.length + 1) === name + '=') {
            cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
            break;
          }
        }
      }
      return cookieValue;
    };

    Application.prototype.csrfSafeMethod = function(method) {
      return /^(GET|HEAD|OPTIONS|TRACE)$/.test(method);
    };

    Application.prototype.sameOrigin = function(url) {
      var host, origin, protocol, sr_origin;
      host = document.location.host;
      protocol = document.location.protocol;
      sr_origin = "//" + host;
      origin = "" + protocol + sr_origin;
      return (url === origin || url.slice(0, origin.length + 1) === origin + '/') || (url === sr_origin || url.slice(0, sr_origin.length + 1) === sr_origin + '/') || !(/^(\/\/|http:|https:).*/.test(url));
    };

    Application.prototype.setupAjax = function() {
      var csrftoken, self;
      self = this;
      csrftoken = this.getCookie('csrftoken');
      return $.ajax({
        beforeSend: function(xhr, settings) {
          if (!self.csrfSafeMethod(settings.type) && self.sameOrigin(settings.url)) {
            return xhr.setRequestHeader('X-CSRFToken', csrftoken);
          }
        }
      });
    };

    Application.prototype.formatQueryStrings = function(querystrings) {
      var key, query, value;
      query = '';
      for (key in querystrings) {
        value = querystrings[key];
        query += "" + key + "=" + value + "&";
      }
      return encodeURIComponent(query);
    };

    Application.prototype.fetch = function(endpoint, querystrings, async) {
      var opts, result;
      opts = {
        url: this.API_ROOT.format(endpoint) + '?' + this.formatQueryStrings(querystrings || {}),
        async: async,
        dataType: "json"
      };
      result = void 0;
      if (async === false && async !== void 0) {
        $.ajax(opts).done(function(data) {
          return result = data;
        });
      } else {
        result = $.ajax(opts);
      }
      return result;
    };

    Application.prototype.debugEnabled = function() {
      var debug;
      debug = parseInt(this.getQueryStringValue('debug'), 10);
      return debug > 0;
    };

    Application.prototype.getQueryStringValue = function(query) {
      var pattern, results;
      pattern = new RegExp("[\\?&]" + query + "=([^&#]*)");
      results = pattern.exec(location.search);
      if (results) {
        return decodeURIComponent(results[1].replace(/\+/g, ' '));
      } else {
        return '';
      }
    };

    Application.prototype.addForm = function(name, target) {
      var form;
      name = name.toTitleCase();
      target = $(target || 'body').eq(0);
      form = new this.Views["" + name + "Form"]({
        'el': "form"
      });
      target.append(form.render().$el);
      return this;
    };

    Application.prototype.shuffle = function(array) {
      var currentIndex, index, tmp;
      array = array.slice(0);
      index = 0;
      currentIndex = array.length;
      while (currentIndex > 0) {
        index = Math.floor(Math.random() * currentIndex);
        currentIndex -= 1;
        tmp = array[currentIndex];
        array[currentIndex] = array[index];
        array[index] = tmp;
      }
      return array;
    };

    Application.prototype.uniqueId = function() {
      var characters, id, maxlen;
      characters = 'abcdefghijklmnopqrstuvwxyz'.split('').concat('0123456789'.split(''));
      id = null;
      maxlen = 10;
      while (id === null || $('#' + id).length) {
        id = this.shuffle(characters).slice(0, maxlen).join("");
      }
      return id;
    };

    return Application;

  })(Object);


  /*
   * Placeholder for Views and Models
   */

  Application = new Application();

  Application.Views = {};

  Application.Models = {};


  /*
   * Application Models
   */

  Application.Models.Event = (function(_super) {
    __extends(Event, _super);

    function Event() {
      return Event.__super__.constructor.apply(this, arguments);
    }

    Event.prototype.initialize = function(opts) {
      var attributes, item, key, name, stack, value, _ref;
      this.name = opts.name;
      this.type = opts.id;
      attributes = {};
      stack = [];
      stack.push({
        name: "",
        attributes: opts.attributes
      });
      while (stack.length > 0) {
        item = stack.shift();
        name = item.name;
        _ref = item.attributes;
        for (key in _ref) {
          value = _ref[key];
          if (typeof value === 'string') {
            key = name.length ? "" + name + "." + key : key;
            attributes[key] = value;
          } else {
            stack.push({
              name: name.length ? "" + name + "." + key : key,
              attributes: $.isArray(value) ? value[0] : value
            });
          }
        }
      }
      return this.set('event-attributes', attributes);
    };

    Event.prototype.getAttributes = function(type) {
      var eventData, tmp;
      eventData = this.get('event-attributes');
      if (type) {
        tmp = {};
        $.each(eventData, function(key, value) {
          if (value === type) {
            return tmp[key] = value;
          }
        });
        eventData = tmp;
      }
      return $.map(eventData, (function(value, key) {
        return {
          attribute: key,
          type: value
        };
      }));
    };

    Event.prototype.getJSON = function() {
      return this.model.get('event-attribute');
    };

    return Event;

  })(Backbone.Model);

  Application.Models.EventCollection = (function(_super) {
    __extends(EventCollection, _super);

    function EventCollection() {
      return EventCollection.__super__.constructor.apply(this, arguments);
    }

    EventCollection.prototype.url = API_ROOT.format('event');

    EventCollection.prototype.model = Application.Models.Event;

    EventCollection.prototype.parse = function(response) {
      return response.objects || [];
    };

    return EventCollection;

  })(Backbone.Collection);

  Application.Models.Method = (function(_super) {
    __extends(Method, _super);

    function Method() {
      return Method.__super__.constructor.apply(this, arguments);
    }

    Method.prototype.type = function() {
      return this.get('argument_type');
    };

    Method.prototype.getJSON = function() {
      return this.get('id');
    };

    return Method;

  })(Backbone.Model);

  Application.Models.MethodCollection = (function(_super) {
    __extends(MethodCollection, _super);

    function MethodCollection() {
      return MethodCollection.__super__.constructor.apply(this, arguments);
    }

    MethodCollection.prototype.url = API_ROOT.format('method');

    MethodCollection.prototype.model = Application.Models.Method;

    MethodCollection.prototype.parse = function(response) {
      return response.objects || [];
    };

    return MethodCollection;

  })(Backbone.Collection);

  Application.Models.Difficulty = (function(_super) {
    __extends(Difficulty, _super);

    function Difficulty() {
      return Difficulty.__super__.constructor.apply(this, arguments);
    }

    Difficulty.prototype.getJSON = function() {
      return this.get('id');
    };

    return Difficulty;

  })(Backbone.Model);

  Application.Models.DifficultyCollection = (function(_super) {
    __extends(DifficultyCollection, _super);

    function DifficultyCollection() {
      return DifficultyCollection.__super__.constructor.apply(this, arguments);
    }

    DifficultyCollection.prototype.url = API_ROOT.format('difficulty');

    DifficultyCollection.prototype.model = Application.Models.Difficulty;

    DifficultyCollection.prototype.parse = function(response) {
      return response.objects || [];
    };

    return DifficultyCollection;

  })(Backbone.Collection);

  Application.Models.AchievementType = (function(_super) {
    __extends(AchievementType, _super);

    function AchievementType() {
      return AchievementType.__super__.constructor.apply(this, arguments);
    }

    AchievementType.prototype.getJSON = function() {
      return this.get('id');
    };

    return AchievementType;

  })(Backbone.Model);

  Application.Models.AchievementTypeCollection = (function(_super) {
    __extends(AchievementTypeCollection, _super);

    function AchievementTypeCollection() {
      return AchievementTypeCollection.__super__.constructor.apply(this, arguments);
    }

    AchievementTypeCollection.prototype.url = API_ROOT.format('achievementtype');

    AchievementTypeCollection.prototype.model = Application.Models.AchievementType;

    AchievementTypeCollection.prototype.parse = function(response) {
      return response.objects || [];
    };

    return AchievementTypeCollection;

  })(Backbone.Collection);

  Application.Models.Condition = (function(_super) {
    __extends(Condition, _super);

    function Condition() {
      return Condition.__super__.constructor.apply(this, arguments);
    }

    Condition.prototype.initialize = function(opts) {
      return this.set('name', this.get('description'));
    };

    Condition.prototype.getJSON = function() {
      return $.extend(true, {}, this.attributes);
    };

    return Condition;

  })(Backbone.Model);

  Application.Models.ConditionCollection = (function(_super) {
    __extends(ConditionCollection, _super);

    function ConditionCollection() {
      return ConditionCollection.__super__.constructor.apply(this, arguments);
    }

    ConditionCollection.prototype.url = API_ROOT.format('customcondition');

    ConditionCollection.prototype.model = Application.Models.Condition;

    ConditionCollection.prototype.parse = function(response) {
      return response.objects || [];
    };

    return ConditionCollection;

  })(Backbone.Collection);

  Application.Models.Badge = (function(_super) {
    __extends(Badge, _super);

    function Badge() {
      return Badge.__super__.constructor.apply(this, arguments);
    }

    Badge.prototype.getJSON = function() {
      return {
        name: this.get('name'),
        description: this.get('description')
      };
    };

    return Badge;

  })(Backbone.Model);


  /*
   * Application Views
   */

  Application.Views.EventAttributeSelect = (function(_super) {
    __extends(EventAttributeSelect, _super);

    function EventAttributeSelect() {
      this.onChange = __bind(this.onChange, this);
      return EventAttributeSelect.__super__.constructor.apply(this, arguments);
    }

    EventAttributeSelect.prototype.tagName = 'select';

    EventAttributeSelect.prototype.className = '';

    EventAttributeSelect.prototype.onChange = function() {
      var selected;
      selected = this.$('option:selected');
      return this.trigger('change', {
        attribute: selected.val(),
        type: selected.data('type')
      });
    };

    EventAttributeSelect.prototype.render = function() {
      var className, _i, _len, _ref;
      this.$el = $(document.createElement(this.tagName));
      _ref = this.className.split(' ');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        className = _ref[_i];
        this.$el.addClass(className);
      }
      if (this.template) {
        this.$el.html(this.template.template(this.model.attributes));
      } else {
        this.$el.html();
      }
      this.$el.attr('id', this.model.cid);
      this.$el.on('change', this.onChange);
      return this.filter();
    };

    EventAttributeSelect.prototype.filter = function(type) {
      var $el, event_name;
      $el = this.$el;
      this.$el.select2('destroy');
      this.$el.children().remove();
      event_name = this.model.get('name').replace(/[\._]/g, " ").toTitleCase();
      $.each(this.model.getAttributes(type), function(index, attribute) {
        var name, option;
        name = attribute.attribute;
        option = $('<option></option>').val(attribute.attribute).data('type', attribute.type).text("" + event_name + "'s " + name);
        return $el.append(option);
      });
      this.$el.select2();
      return this;
    };

    return EventAttributeSelect;

  })(Backbone.View);

  Application.Views.DifficultySelect = (function(_super) {
    __extends(DifficultySelect, _super);

    function DifficultySelect() {
      this.onChange = __bind(this.onChange, this);
      return DifficultySelect.__super__.constructor.apply(this, arguments);
    }

    DifficultySelect.prototype.tagName = 'select';

    DifficultySelect.prototype.initialize = function(opts) {
      this.collection = new Application.Models.DifficultyCollection();
      return this.model = this.collection;
    };

    DifficultySelect.prototype.onChange = function(ev) {
      var model, selected;
      selected = this.$('option:selected');
      model = this.collection.get(selected.val());
      return this.trigger('change', model);
    };

    DifficultySelect.prototype.render = function() {
      var self;
      this.$el = $(document.createElement(this.tagName));
      self = this;
      this.collection.fetch().done(function() {
        var model, option, _i, _len, _ref;
        _ref = self.collection.models;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          model = _ref[_i];
          option = $('<option></option>');
          option.val(model.cid);
          option.text(model.get('name').replace(/[\._]/g, ' ').toTitleCase());
          self.$el.append(option);
        }
        if (self.onRender) {
          self.onRender();
        }
        self.$el.attr('id', Application.uniqueId()).select2();
        self.$el.on('change', self.onChange);
        return self.$el.change();
      });
      return this;
    };

    return DifficultySelect;

  })(Backbone.View);

  Application.Views.MethodSelect = (function(_super) {
    __extends(MethodSelect, _super);

    function MethodSelect() {
      return MethodSelect.__super__.constructor.apply(this, arguments);
    }

    MethodSelect.prototype.initialize = function(opts) {
      this.collection = new Application.Models.MethodCollection();
      return this.model = this.collection;
    };

    MethodSelect.prototype.filter = function(type) {
      var model, option, _i, _len, _ref;
      this.$el.select2('destroy');
      this.$el.children().remove();
      _ref = this.collection.models;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        model = _ref[_i];
        if (type && model.get('type') !== type) {
          continue;
        }
        option = $('<option></option>');
        option.val(model.cid);
        option.text(model.get('name').toTitleCase());
        this.$el.append(option);
      }
      this.$el.select2();
      return this;
    };

    return MethodSelect;

  })(Application.Views.DifficultySelect);

  Application.Views.EventSelect = (function(_super) {
    __extends(EventSelect, _super);

    function EventSelect() {
      return EventSelect.__super__.constructor.apply(this, arguments);
    }

    EventSelect.prototype.initialize = function(opts) {
      this.collection = new Application.Models.EventCollection();
      return this.model = this.collection;
    };

    return EventSelect;

  })(Application.Views.DifficultySelect);

  Application.Views.AchievementTypeSelect = (function(_super) {
    __extends(AchievementTypeSelect, _super);

    function AchievementTypeSelect() {
      return AchievementTypeSelect.__super__.constructor.apply(this, arguments);
    }

    AchievementTypeSelect.prototype.initialize = function(opts) {
      this.collection = new Application.Models.AchievementTypeCollection();
      return this.model = this.collection;
    };

    return AchievementTypeSelect;

  })(Application.Views.DifficultySelect);

  Application.Views.ConditionSelect = (function(_super) {
    __extends(ConditionSelect, _super);

    function ConditionSelect() {
      return ConditionSelect.__super__.constructor.apply(this, arguments);
    }

    ConditionSelect.prototype.initialize = function(opts) {
      this.collection = new Application.Models.ConditionCollection();
      return this.model = this.collection;
    };

    ConditionSelect.prototype.onRender = function() {
      return this.$el.css('width', '100%');
    };

    return ConditionSelect;

  })(Application.Views.DifficultySelect);

  Application.Views.BadgeForm = (function(_super) {
    __extends(BadgeForm, _super);

    function BadgeForm() {
      this.onChange = __bind(this.onChange, this);
      return BadgeForm.__super__.constructor.apply(this, arguments);
    }

    BadgeForm.prototype.tagName = 'fieldset';

    BadgeForm.prototype.template = '#badge-form';

    BadgeForm.prototype.className = 'rounded-box';

    BadgeForm.prototype.attachListeners = function() {
      this.$el.on('change keyup paste', 'textarea, input', this.onChange);
      return this;
    };

    BadgeForm.prototype.initialize = function() {
      return this.model.set('id', this.model.cid);
    };

    BadgeForm.prototype.onChange = function(ev) {
      var name, target;
      target = this.$(ev.currentTarget);
      name = target.attr('name');
      if (target.is('textarea')) {
        return this.model.set(name, target.text());
      } else {
        return this.model.set(name, target.val());
      }
    };

    BadgeForm.prototype.serialize = function() {
      return this.model.getJSON();
    };

    BadgeForm.prototype.render = function() {
      var className, _i, _len, _ref;
      this.$el = $(document.createElement(this.tagName));
      this.$el.html($(this.template).html().template(this.model.attributes));
      _ref = this.className.split(' ');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        className = _ref[_i];
        this.$el.addClass(className);
      }
      return this.attachListeners();
    };

    return BadgeForm;

  })(Backbone.View);

  Application.Views.CustomConditionForm = (function(_super) {
    __extends(CustomConditionForm, _super);

    function CustomConditionForm() {
      return CustomConditionForm.__super__.constructor.apply(this, arguments);
    }

    CustomConditionForm.prototype.tagName = 'fieldset';

    CustomConditionForm.prototype.template = '#custom-condition-form';

    CustomConditionForm.prototype.className = 'rounded-box';

    CustomConditionForm.prototype.regions = {
      'condition': null
    };

    CustomConditionForm.prototype.render = function() {
      var className, condition, selector, _i, _len, _ref;
      this.$el = $(document.createElement(this.tagName));
      _ref = this.className.split(' ');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        className = _ref[_i];
        this.$el.addClass(className);
      }
      this.$el.html($(this.template).html().template({
        id: this.id
      }));
      selector = this.regions.condition ? this.$(this.regions.condition) : this.$el;
      condition = new Application.Views.ConditionSelect();
      this.listenTo(condition, 'change', this.conditionChange);
      selector.append(condition.render().$el);
      return this;
    };

    CustomConditionForm.prototype.conditionChange = function(model) {
      if (this.data == null) {
        this.data = {};
      }
      return this.data.condition = model.get('id');
    };

    CustomConditionForm.prototype.serialize = function() {
      return {
        id: this.data.condition
      };
    };

    return CustomConditionForm;

  })(Backbone.View);

  Application.Views.ValueConditionForm = (function(_super) {
    __extends(ValueConditionForm, _super);

    function ValueConditionForm() {
      return ValueConditionForm.__super__.constructor.apply(this, arguments);
    }

    ValueConditionForm.prototype.tagName = 'fieldset';

    ValueConditionForm.prototype.template = '#value-condition-form';

    ValueConditionForm.prototype.className = 'rounded-box';

    ValueConditionForm.prototype.regions = {
      'attribute': ".condition-attribute",
      'value': ".condition-value",
      'method': ".condition-method",
      'description': ".condition-description"
    };

    ValueConditionForm.prototype.initialize = function() {
      return this.data = {};
    };

    ValueConditionForm.prototype.render = function() {
      var className, self, view, _i, _len, _ref;
      self = this;
      this.$el = $(document.createElement(this.tagName));
      _ref = this.className.split(' ');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        className = _ref[_i];
        this.$el.addClass(className);
      }
      this.$el.html($(this.template).html().template($.extend(true, {}, this.model.attributes, {
        id: this.id
      })));
      this.subviews = {};
      view = new Application.Views.EventAttributeSelect({
        model: this.model
      });
      this.subviews.attribute = view;
      this.$(this.regions.attribute).append(view.render().$el);
      view.$el.css('width', '100%');
      this.listenTo(view, 'change', function(attribute) {
        self.data.attribute = attribute.attribute;
        return self.subviews.method.filter(attribute.type);
      });
      view = new Application.Views.MethodSelect();
      this.subviews.method = view;
      this.$(this.regions.method).append(view.render().$el);
      view.$el.css('width', '100%');
      this.listenTo(view, 'change', function(method) {
        self.data.method = method.get('id');
        return self.subviews.attribute.filter(method.get('argument_type'));
      });
      view = $('<input></input>');
      this.$(this.regions.value).append(view);
      this.subviews.value = view;
      view = $('<input></input>');
      this.$(this.regions.description).append(view);
      this.subviews.description = view;
      return this;
    };

    ValueConditionForm.prototype.serialize = function() {
      return $.extend(true, {}, {
        method: self.data.method,
        attribute: self.data.attribute,
        value: this.subviews.value.val(),
        event_type: this.model.get('event_type'),
        description: this.subviews.description.val()
      });
    };

    return ValueConditionForm;

  })(Backbone.View);

  Application.Views.AchievementForm = (function(_super) {
    __extends(AchievementForm, _super);

    function AchievementForm() {
      this.addCondition = __bind(this.addCondition, this);
      this.addBadge = __bind(this.addBadge, this);
      this.eventChange = __bind(this.eventChange, this);
      return AchievementForm.__super__.constructor.apply(this, arguments);
    }

    AchievementForm.prototype.tagName = 'form';

    AchievementForm.prototype.template = '#achievement-form';

    AchievementForm.prototype.className = '';

    AchievementForm.prototype.post = "/achievements/create";

    AchievementForm.prototype.method = "POST";

    AchievementForm.prototype.regions = {
      'conditions': "#conditions",
      'badge': "#badge",
      'type': "#type",
      'event': '#event',
      'description': "#description",
      'name': "#name",
      'difficulty': "#difficulty",
      'grouping': "#grouping"
    };

    AchievementForm.prototype.initialize = function(opts) {
      return this.data = {};
    };

    AchievementForm.prototype.attachListeners = function() {
      this.$el.on('click', '.js-add-condition', this.addCondition);
      this.$el.on('click', '.js-add-badge', this.addBadge);
      return this;
    };

    AchievementForm.prototype.eventChange = function(model) {
      this.event = model;
      this.regions.conditions.empty();
      return this;
    };

    AchievementForm.prototype.addBadge = function() {
      if (!this.data.badge) {
        this.data.badge = new Application.Views.BadgeForm({
          model: new Application.Models.Badge()
        });
        this.regions.badge.append(this.data.badge.render().$el);
        return this.listenTo(this.data.badge, 'remove', this.addBadge);
      } else {
        return this.data.badge = null;
      }
    };

    AchievementForm.prototype.addCondition = function(ev) {
      var form, name, newId, target, _base, _base1;
      form = void 0;
      target = $(ev.currentTarget);
      name = target.data('condition');
      newId = this.regions.conditions.children().length + 1;
      if (name === 'custom') {
        if ((_base = this.data)['custom-conditions'] == null) {
          _base['custom-conditions'] = [];
        }
        form = new Application.Views.CustomConditionForm({
          'id': newId
        });
        this.data['custom-conditions'].push(form);
      } else if (name === 'value') {
        if ((_base1 = this.data)['value-conditions'] == null) {
          _base1['value-conditions'] = [];
        }
        form = new Application.Views.ValueConditionForm({
          'id': newId,
          'model': this.event
        });
        this.data['value-conditions'].push(form);
      } else {
        console.warn('getConditionType called with unknown condition');
      }
      if (form !== void 0) {
        return this.regions.conditions.append(form.render().$el);
      }
    };

    AchievementForm.prototype.render = function() {
      var $el, className, region, select, self, _i, _len, _ref;
      self = this;
      this.$el = $(document.createElement(this.tagName));
      _ref = this.className.split(' ');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        className = _ref[_i];
        this.$el.addClass(className);
      }
      this.$el.html($(this.template).html().template());
      this.$el.attr('method', this.method).attr('post', this.post);
      this.regions.badge = this.$(this.regions.badge);
      this.regions.conditions = this.$(this.regions.conditions);
      this.regions.name = this.$(this.regions.name);
      this.regions.description = this.$(this.regions.description);
      this.regions.grouping = this.$(this.regions.grouping);
      select = new Application.Views.AchievementTypeSelect();
      $el = select.render().$el;
      region = this.$(this.regions.type);
      $el.css('width', "300px").attr('name', region.attr('name')).attr('id', region.attr('id'));
      region.replaceWith($el);
      this.listenTo(select, 'change', function(model) {
        var _base;
        if ((_base = self.data).achievement == null) {
          _base.achievement = {};
        }
        return self.data.achievement.type = model.get('id');
      });
      select = new Application.Views.DifficultySelect();
      $el = select.render().$el;
      region = this.$(this.regions.difficulty);
      $el.css('width', "300px").attr('name', region.attr('name')).attr('id', region.attr('id'));
      region.replaceWith($el);
      this.listenTo(select, 'change', function(model) {
        var _base;
        if ((_base = self.data).achievement == null) {
          _base.achievement = {};
        }
        return self.data.achievement.difficulty = model.get('id');
      });
      select = new Application.Views.EventSelect();
      $el = select.render().$el;
      region = this.$(this.regions.event);
      $el.css('width', "300px").attr('name', region.attr('name')).attr('id', region.attr('id'));
      region.replaceWith($el);
      this.listenTo(select, 'change', this.eventChange);
      this.regions.grouping.select2();
      return this.attachListeners();
    };

    AchievementForm.prototype.serialize = function() {
      var condition, data, _i, _len, _ref;
      data = $.extend(true, {}, this.data);
      data.achievement = $.extend(true, data.achivement, {
        name: this.regions.name.val(),
        description: this.regions.description.val(),
        grouping: this.regions.grouping.val()
      });
      if (data.badge) {
        data.badge = data.badge.serialize();
      }
      _ref = ['custom-conditions', 'value-conditions'];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        condition = _ref[_i];
        if (data[condition]) {
          data[condition] = $.map(data[condition], function(form) {
            return form.serialize();
          });
        }
      }
      return data;
    };

    return AchievementForm;

  })(Backbone.View);

  (function(window, $, Backbone) {
    window.App = Application;
    console.log('%cGit Achievements', "color: #666; font-size: x-large; font-family 'Comic Sans', serif;");
    return console.log('\u00A9 Ford Peprah, 2013-2014');
  })(window, window.$ || window.jQuery, window.Backbone);

}).call(this);
